{
  "version": 3,
  "sources": ["../../src/day03/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\n\nconst parseInput = (rawInput: string) => rawInput;\n\nconst printBoard = (board: string[][]) => {\n  for (let x = 0; x < board.length; x++) {\n    const row = board[x];\n    let output = \"\"\n    for (let y = 0; y < row.length; y++) {\n      output += board[x][y]\n    }\n\n    console.log(`${output}\\n`)\n  }\n}\n\nconst parseBoard = (input: string) => {\n  const lines = input.split(\"\\n\");\n  const board: string[][] = new Array(lines.length).fill(0).map(() => new Array(lines[0].length).fill(0));\n\n  lines.forEach((line, row) => {\n    line.split(\"\").forEach((char, column) => {\n      board[row][column] = char\n    })\n  })\n\n  return board\n\n}\n\n\nconst getNumbers = (board: string[][]) => {\n  const allNumbers: { value: number, boardIndizes: { x: number, y: number }[] }[] = []\n  for (let x = 0; x < board.length; x++) {\n    let num = \"\";\n    let indizes = []\n    const row = board[x]\n\n    for (let y = 0; y < row.length; y++) {\n      if (!Number.isNaN(parseInt(row[y]))) {\n        num += row[y]\n        indizes.push({ x, y })\n      } else if (num !== \"\") {\n        allNumbers.push({ value: parseInt(num), boardIndizes: indizes })\n        num = \"\"\n        indizes = []\n      }\n    }\n\n    if (num !== \"\") {\n      allNumbers.push({ value: parseInt(num), boardIndizes: indizes })\n    }\n\n  }\n\n  return allNumbers;\n}\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const validNumbers: number[] = []\n  const board = parseBoard(input)\n  const allNumbers: { value: number, boardIndizes: { x: number, y: number }[] }[] = getNumbers(board)\n\n  allNumbers.forEach(item => {\n    let foundChar = 0\n\n    item.boardIndizes.forEach(indizesPair => {\n      const isTopEnd = indizesPair.x === 0\n      const isBottomEnd = indizesPair.x === board.length - 1\n      const isLeftEnd = indizesPair.y === 0;\n      const isRightEnd = indizesPair.y === board[1].length - 1\n\n      const top = !isTopEnd ? board[indizesPair.x - 1][indizesPair.y] : \".\";\n      const topLeft = !isTopEnd && !isLeftEnd ? board[indizesPair.x - 1][indizesPair.y - 1] : \".\"\n      const topRight = !isTopEnd && !isRightEnd ? board[indizesPair.x - 1][indizesPair.y + 1] : \".\"\n      const bottom = !isBottomEnd ? board[indizesPair.x + 1][indizesPair.y] : \".\";\n      const bottomLeft = !isBottomEnd && !isLeftEnd ? board[indizesPair.x + 1][indizesPair.y - 1] : \".\"\n      const bottomRight = !isBottomEnd && !isRightEnd ? board[indizesPair.x + 1][indizesPair.y + 1] : \".\"\n      const left = !isLeftEnd ? board[indizesPair.x][indizesPair.y - 1] : \".\";\n      const right = !isRightEnd ? board[indizesPair.x][indizesPair.y + 1] : \".\";\n\n      const sorroundings = [top, topLeft, topRight, bottom, bottomLeft, bottomRight, left, right];\n\n      const specialChar = sorroundings.filter(item => item !== \".\" && Number.isNaN(parseInt(item)))\n\n      if (specialChar.length > 0) {\n        foundChar = foundChar + 1\n      }\n\n    })\n    if (foundChar > 0) {\n      validNumbers.push(item.value)\n    }\n  })\n\n  return validNumbers.reduce((acc, current) => {\n    return acc + current;\n  }, 0);\n};\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const board = parseBoard(input)\n  const validGears: number[] = []\n  const allNumbers: { value: number, boardIndizes: { x: number, y: number }[] }[] = getNumbers(board)\n  const stars: { value: number, x: number, y: number }[] = []\n\n  allNumbers.forEach(item => {\n    let foundChar = 0\n    let starCoordinates: { [key: string]: number} = {}\n\n    item.boardIndizes.forEach(indizesPair => {\n      const isTopEnd = indizesPair.x === 0\n      const isBottomEnd = indizesPair.x === board.length - 1\n      const isLeftEnd = indizesPair.y === 0;\n      const isRightEnd = indizesPair.y === board[1].length - 1\n\n      const top = !isTopEnd ? board[indizesPair.x - 1][indizesPair.y] : \".\";\n      const topLeft = !isTopEnd && !isLeftEnd ? board[indizesPair.x - 1][indizesPair.y - 1] : \".\"\n      const topRight = !isTopEnd && !isRightEnd ? board[indizesPair.x - 1][indizesPair.y + 1] : \".\"\n      const bottom = !isBottomEnd ? board[indizesPair.x + 1][indizesPair.y] : \".\";\n      const bottomLeft = !isBottomEnd && !isLeftEnd ? board[indizesPair.x + 1][indizesPair.y - 1] : \".\"\n      const bottomRight = !isBottomEnd && !isRightEnd ? board[indizesPair.x + 1][indizesPair.y + 1] : \".\"\n      const left = !isLeftEnd ? board[indizesPair.x][indizesPair.y - 1] : \".\";\n      const right = !isRightEnd ? board[indizesPair.x][indizesPair.y + 1] : \".\";\n\n      if (top === \"*\") {\n        starCoordinates = ({  x: indizesPair.x - 1, y: indizesPair.y })\n      } else if (topLeft === \"*\") {\n        starCoordinates = ({  x: indizesPair.x - 1, y: indizesPair.y - 1 })\n      } else if (topRight === \"*\") {\n        starCoordinates = ({  x: indizesPair.x - 1, y: indizesPair.y + 1 })\n      } else if (bottom === \"*\") {\n        starCoordinates = ({  x: indizesPair.x + 1, y: indizesPair.y })\n      } else if (bottomLeft === \"*\") {\n        starCoordinates = ({  x: indizesPair.x + 1, y: indizesPair.y - 1 })\n      } else if (bottomRight === \"*\") {\n        starCoordinates = ({  x: indizesPair.x + 1, y: indizesPair.y + 1 })\n      } else if (left === \"*\") {\n        starCoordinates = ({  x: indizesPair.x, y: indizesPair.y - 1 })\n      } else if (right === \"*\") {\n        starCoordinates = ({  x: indizesPair.x, y: indizesPair.y + 1 })\n      }\n\n    })\n\n    if (starCoordinates.x && starCoordinates.y) \n    { stars.push({ value: item.value, x: starCoordinates.x, y: starCoordinates.y + 1 }) }\n  })\n\n  stars.forEach(numberWithStar => {\n    const secondPart = stars.find(item => item?.x === numberWithStar?.x && item?.y === numberWithStar?.y && item?.value !== numberWithStar?.value)\n\n    if (secondPart && numberWithStar) {\n      validGears.push(secondPart.value * numberWithStar?.value)\n    }\n  })\n\n\n  return [...new Set(validGears)].reduce((acc, current) => {\n    return acc + current;\n  }, 0);\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `.......+46\n...*......`,\n        expected: 46,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..`,\n        expected: 467835,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n  onlyTests: false,\n});\n"],
  "mappings": "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",
  "names": ["item"]
}
