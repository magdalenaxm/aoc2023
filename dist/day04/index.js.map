{
  "version": 3,
  "sources": ["../../src/day04/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\n\nconst parseInput = (rawInput: string) => rawInput;\n\nconst part1 = (rawInput: string) => {\n    const input = parseInput(rawInput);\n\n    const cardsInput = input.split(\"\\n\");\n    const cards: { winningNumbers: number[]; myNumbers: number[] }[] = [];\n\n    let result = 0;\n\n    cardsInput.forEach(card => {\n        const cardNumbers = card.substring(card.indexOf(\":\") + 1).split(\" | \").map(item => item.trim())\n        cards.push({\n            winningNumbers: cardNumbers[0].split(/ +/).filter(item => item !== \" \").map(num => parseInt(num)),\n            myNumbers: cardNumbers[1].split(/ +/).filter(item => item !== \" \").map(num => parseInt(num))\n        })\n    })\n\n    cards.forEach(card => {\n        const matchingNumbers = card.winningNumbers.filter(value => card.myNumbers.includes(value));\n\n        if (rawInput.includes(\"Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\")) {\n            console.log(matchingNumbers.length);\n        }\n        result += matchingNumbers.reduce((acc, _current) => {\n            return acc === 0 ? 1 : acc * 2\n        }, 0)\n    })\n\n    // if (rawInput.includes(\"Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\")) {\n    //     console.log(cards)\n    // }\n\n    return result;\n};\n\nconst part2 = (rawInput: string) => {\n    const input = parseInput(rawInput);\n\n    const cardsInput = input.split(\"\\n\");\n    const cards: { winningNumbers: number[]; myNumbers: number[] }[] = [];\n\n    let result = 0;\n\n    cardsInput.forEach(card => {\n        const cardNumbers = card.substring(card.indexOf(\":\") + 1).split(\" | \").map(item => item.trim())\n        cards.push({\n            winningNumbers: cardNumbers[0].split(/ +/).filter(item => item !== \" \").map(num => parseInt(num)),\n            myNumbers: cardNumbers[1].split(/ +/).filter(item => item !== \" \").map(num => parseInt(num))\n        })\n    })\n\n    const copies = Array(cardsInput.length).fill(1);\n\n    cards.forEach((card, index) => {\n        const matchingNumbers = card.winningNumbers.filter(value => card.myNumbers.includes(value));\n\n        for (let i = 1; i <= matchingNumbers.length; i++) {\n            copies[index + i] = copies[index + i] + copies[index];\n        }\n\n    });\n\n    result = copies.reduce((acc, current) => {\n        return acc + current;\n    }, 0);\n\n    return result;\n};\n\nrun({\n    part1: {\n        tests: [\n            {\n                input: `Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11`,\n                expected: 13,\n            },\n        ],\n        solution: part1,\n    },\n    part2: {\n        tests: [\n            {\n                input: `Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11`,\n                expected: 30,\n            },\n        ],\n        solution: part2,\n    },\n    trimTestInputs: true,\n    onlyTests: false,\n});\n"],
  "mappings": "AAAA,OAAO,SAAS;AAEhB,MAAM,aAAa,CAAC,aAAqB;AAEzC,MAAM,QAAQ,CAAC,aAAqB;AAChC,QAAM,QAAQ,WAAW,QAAQ;AAEjC,QAAM,aAAa,MAAM,MAAM,IAAI;AACnC,QAAM,QAA6D,CAAC;AAEpE,MAAI,SAAS;AAEb,aAAW,QAAQ,UAAQ;AACvB,UAAM,cAAc,KAAK,UAAU,KAAK,QAAQ,GAAG,IAAI,CAAC,EAAE,MAAM,KAAK,EAAE,IAAI,UAAQ,KAAK,KAAK,CAAC;AAC9F,UAAM,KAAK;AAAA,MACP,gBAAgB,YAAY,GAAG,MAAM,IAAI,EAAE,OAAO,UAAQ,SAAS,GAAG,EAAE,IAAI,SAAO,SAAS,GAAG,CAAC;AAAA,MAChG,WAAW,YAAY,GAAG,MAAM,IAAI,EAAE,OAAO,UAAQ,SAAS,GAAG,EAAE,IAAI,SAAO,SAAS,GAAG,CAAC;AAAA,IAC/F,CAAC;AAAA,EACL,CAAC;AAED,QAAM,QAAQ,UAAQ;AAClB,UAAM,kBAAkB,KAAK,eAAe,OAAO,WAAS,KAAK,UAAU,SAAS,KAAK,CAAC;AAE1F,QAAI,SAAS,SAAS,kDAAkD,GAAG;AACvE,cAAQ,IAAI,gBAAgB,MAAM;AAAA,IACtC;AACA,cAAU,gBAAgB,OAAO,CAAC,KAAK,aAAa;AAChD,aAAO,QAAQ,IAAI,IAAI,MAAM;AAAA,IACjC,GAAG,CAAC;AAAA,EACR,CAAC;AAMD,SAAO;AACX;AAEA,MAAM,QAAQ,CAAC,aAAqB;AAChC,QAAM,QAAQ,WAAW,QAAQ;AAEjC,QAAM,aAAa,MAAM,MAAM,IAAI;AACnC,QAAM,QAA6D,CAAC;AAEpE,MAAI,SAAS;AAEb,aAAW,QAAQ,UAAQ;AACvB,UAAM,cAAc,KAAK,UAAU,KAAK,QAAQ,GAAG,IAAI,CAAC,EAAE,MAAM,KAAK,EAAE,IAAI,UAAQ,KAAK,KAAK,CAAC;AAC9F,UAAM,KAAK;AAAA,MACP,gBAAgB,YAAY,GAAG,MAAM,IAAI,EAAE,OAAO,UAAQ,SAAS,GAAG,EAAE,IAAI,SAAO,SAAS,GAAG,CAAC;AAAA,MAChG,WAAW,YAAY,GAAG,MAAM,IAAI,EAAE,OAAO,UAAQ,SAAS,GAAG,EAAE,IAAI,SAAO,SAAS,GAAG,CAAC;AAAA,IAC/F,CAAC;AAAA,EACL,CAAC;AAED,QAAM,SAAS,MAAM,WAAW,MAAM,EAAE,KAAK,CAAC;AAE9C,QAAM,QAAQ,CAAC,MAAM,UAAU;AAC3B,UAAM,kBAAkB,KAAK,eAAe,OAAO,WAAS,KAAK,UAAU,SAAS,KAAK,CAAC;AAE1F,aAAS,IAAI,GAAG,KAAK,gBAAgB,QAAQ,KAAK;AAC9C,aAAO,QAAQ,KAAK,OAAO,QAAQ,KAAK,OAAO;AAAA,IACnD;AAAA,EAEJ,CAAC;AAED,WAAS,OAAO,OAAO,CAAC,KAAK,YAAY;AACrC,WAAO,MAAM;AAAA,EACjB,GAAG,CAAC;AAEJ,SAAO;AACX;AAEA,IAAI;AAAA,EACA,OAAO;AAAA,IACH,OAAO;AAAA,MACH;AAAA,QACI,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMP,UAAU;AAAA,MACd;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,EACd;AAAA,EACA,OAAO;AAAA,IACH,OAAO;AAAA,MACH;AAAA,QACI,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMP,UAAU;AAAA,MACd;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,EACd;AAAA,EACA,gBAAgB;AAAA,EAChB,WAAW;AACf,CAAC;",
  "names": []
}
