{
  "version": 3,
  "sources": ["../../src/day06/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\n\nconst parseInput = (rawInput: string) => rawInput;\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const numWinnigOptions: number[] = []\n\n  const lines = input.split(\"\\n\");\n  const times = lines[0].substring(lines[0].indexOf(\":\") + 1).trim().split(/ +/).map(time => parseInt(time))\n  const distances = lines[1].substring(lines[1].indexOf(\":\") + 1).trim().split(/ +/).map(distance => parseInt(distance))\n\n  for(let i = 0; i < times.length; i++){\n    const recordTime = times[i];\n    const recordDistance = distances[i]\n    const optionDistances = []\n\n    for(let j = 0; j <= recordTime; j++){\n      const remainingTime = recordTime - j;\n\n      const dist = remainingTime * j\n      if(dist > recordDistance){\n        optionDistances.push(dist)\n      }\n\n    }\n\n    numWinnigOptions.push(optionDistances.length)\n\n  }\n\n  return numWinnigOptions.reduce((acc, current) => {return acc * current}, 1);\n};\n\nconst part2 = (rawInput: string) => {\n const input = parseInput(rawInput);\n\n  const lines = input.split(\"\\n\");\n  const recordTime = parseInt(lines[0].substring(lines[0].indexOf(\":\") + 1).trim().split(/ +/).join(\"\"))\n  const recordDistance = parseInt(lines[1].substring(lines[1].indexOf(\":\") + 1).trim().split(/ +/).join(\"\"))\n\n    const optionDistances = []\n\n    for(let j = 0; j <= recordTime; j++){\n      const remainingTime = recordTime - j;\n\n      const dist = remainingTime * j\n      if(dist > recordDistance){\n        optionDistances.push(dist)\n      }\n\n    }\n\n  return optionDistances.length;\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `Time:      7  15   30\nDistance:  9  40  200`,\n        expected: 288,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `Time:      7  15   30\nDistance:  9  40  200`,\n        expected: 71503,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n  onlyTests: false,\n});\n"],
  "mappings": "AAAA,OAAO,SAAS;AAEhB,MAAM,aAAa,CAAC,aAAqB;AAEzC,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW,QAAQ;AACjC,QAAM,mBAA6B,CAAC;AAEpC,QAAM,QAAQ,MAAM,MAAM,IAAI;AAC9B,QAAM,QAAQ,MAAM,GAAG,UAAU,MAAM,GAAG,QAAQ,GAAG,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,UAAQ,SAAS,IAAI,CAAC;AACzG,QAAM,YAAY,MAAM,GAAG,UAAU,MAAM,GAAG,QAAQ,GAAG,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,cAAY,SAAS,QAAQ,CAAC;AAErH,WAAQ,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAI;AACnC,UAAM,aAAa,MAAM;AACzB,UAAM,iBAAiB,UAAU;AACjC,UAAM,kBAAkB,CAAC;AAEzB,aAAQ,IAAI,GAAG,KAAK,YAAY,KAAI;AAClC,YAAM,gBAAgB,aAAa;AAEnC,YAAM,OAAO,gBAAgB;AAC7B,UAAG,OAAO,gBAAe;AACvB,wBAAgB,KAAK,IAAI;AAAA,MAC3B;AAAA,IAEF;AAEA,qBAAiB,KAAK,gBAAgB,MAAM;AAAA,EAE9C;AAEA,SAAO,iBAAiB,OAAO,CAAC,KAAK,YAAY;AAAC,WAAO,MAAM;AAAA,EAAO,GAAG,CAAC;AAC5E;AAEA,MAAM,QAAQ,CAAC,aAAqB;AACnC,QAAM,QAAQ,WAAW,QAAQ;AAEhC,QAAM,QAAQ,MAAM,MAAM,IAAI;AAC9B,QAAM,aAAa,SAAS,MAAM,GAAG,UAAU,MAAM,GAAG,QAAQ,GAAG,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,IAAI,EAAE,KAAK,EAAE,CAAC;AACrG,QAAM,iBAAiB,SAAS,MAAM,GAAG,UAAU,MAAM,GAAG,QAAQ,GAAG,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,IAAI,EAAE,KAAK,EAAE,CAAC;AAEvG,QAAM,kBAAkB,CAAC;AAEzB,WAAQ,IAAI,GAAG,KAAK,YAAY,KAAI;AAClC,UAAM,gBAAgB,aAAa;AAEnC,UAAM,OAAO,gBAAgB;AAC7B,QAAG,OAAO,gBAAe;AACvB,sBAAgB,KAAK,IAAI;AAAA,IAC3B;AAAA,EAEF;AAEF,SAAO,gBAAgB;AACzB;AAEA,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA,QAEP,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AAAA,EACA,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA,QAEP,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AAAA,EACA,gBAAgB;AAAA,EAChB,WAAW;AACb,CAAC;",
  "names": []
}
