{
  "version": 3,
  "sources": ["../../src/day02/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\n\nconst parseInput = (rawInput: string) => rawInput;\n\ntype Set = { red: number, green: number; blue: number }\ntype Game = { id: number, sets: Set[] }\n\nconst parseGame = (input: string): Game[] => {\n  const games: Game[] = []\n\n  const gameInput = input.split(\"\\n\")\n  gameInput.forEach(game => {\n    const gameNumber = parseInt(game.substring(0, game.indexOf(\":\")).match(/\\d+/)?.[0] ?? \"\");\n    const sets: Set[] = []\n\n    const setLines = game.substring(game.indexOf(\":\")).slice(1).split(\";\").map(item => item.trim())\n\n    setLines.forEach(setLine => {\n      const setItems = setLine.split(\",\").map(item => item.trim())\n      let blue = 0;\n      let green = 0;\n      let red = 0;\n\n      setItems.forEach(color => {\n        const num = color.match(/\\d+/)?.[0] ? parseInt(color.match(/\\d+/)![0]) : 0\n        if (color.includes(\"red\")) {\n          red = num\n        } else if (color.includes(\"green\")) {\n          green = num\n        } else if (color.includes(\"blue\")) {\n          blue = num\n        }\n      })\n\n      sets.push({\n        blue,\n        green,\n        red,\n      })\n    })\n\n    games.push({\n      id: gameNumber,\n      sets\n    })\n  })\n\n  return games\n\n}\n\n\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const config = {\n    red: 12,\n    green: 13,\n    blue: 14\n  }\n  const games: Game[] = parseGame(input)\n  const possibleGames: number[] = []\n\n  games.forEach(game => {\n    let possiple = 0\n\n    game.sets.forEach(set => {\n      if (set.red <= config.red && set.green <= config.green && set.blue <= config.blue) {\n        possiple += 1\n      }\n    })\n\n    if (possiple === game.sets.length) {\n      possibleGames.push(game.id)\n    }\n\n  })\n\n  return possibleGames.reduce((acc, current) => {\n    return acc + current;\n  }, 0);\n};\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const games: Game[] = parseGame(input)\n  const gamePowers: number[] = []\n\n  games.forEach(game => {\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n\n    game.sets.forEach(set => {\n      if (set.red > red) {\n        red = set.red\n      }\n\n      if (set.green > green) {\n        green = set.green\n      }\n\n      if (set.blue > blue) {\n        blue = set.blue\n      }\n    })\n\n    gamePowers.push(red * blue * green)\n\n  })\n\n  return gamePowers.reduce((acc, current) => {\n    return acc + current;\n  }, 0);\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green`,\n        expected: 8,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green`,\n        expected: 2286,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n  onlyTests: false,\n});\n"],
  "mappings": "AAAA,OAAO,SAAS;AAEhB,MAAM,aAAa,CAAC,aAAqB;AAKzC,MAAM,YAAY,CAAC,UAA0B;AAC3C,QAAM,QAAgB,CAAC;AAEvB,QAAM,YAAY,MAAM,MAAM,IAAI;AAClC,YAAU,QAAQ,UAAQ;AAX5B;AAYI,UAAM,aAAa,WAAS,UAAK,UAAU,GAAG,KAAK,QAAQ,GAAG,CAAC,EAAE,MAAM,KAAK,MAAhD,mBAAoD,OAAM,EAAE;AACxF,UAAM,OAAc,CAAC;AAErB,UAAM,WAAW,KAAK,UAAU,KAAK,QAAQ,GAAG,CAAC,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAI,UAAQ,KAAK,KAAK,CAAC;AAE9F,aAAS,QAAQ,aAAW;AAC1B,YAAM,WAAW,QAAQ,MAAM,GAAG,EAAE,IAAI,UAAQ,KAAK,KAAK,CAAC;AAC3D,UAAI,OAAO;AACX,UAAI,QAAQ;AACZ,UAAI,MAAM;AAEV,eAAS,QAAQ,WAAS;AAvBhC,YAAAA;AAwBQ,cAAM,QAAMA,MAAA,MAAM,MAAM,KAAK,MAAjB,gBAAAA,IAAqB,MAAK,SAAS,MAAM,MAAM,KAAK,EAAG,EAAE,IAAI;AACzE,YAAI,MAAM,SAAS,KAAK,GAAG;AACzB,gBAAM;AAAA,QACR,WAAW,MAAM,SAAS,OAAO,GAAG;AAClC,kBAAQ;AAAA,QACV,WAAW,MAAM,SAAS,MAAM,GAAG;AACjC,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AAED,WAAK,KAAK;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,KAAK;AAAA,MACT,IAAI;AAAA,MACJ;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,SAAO;AAET;AAIA,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW,QAAQ;AACjC,QAAM,SAAS;AAAA,IACb,KAAK;AAAA,IACL,OAAO;AAAA,IACP,MAAM;AAAA,EACR;AACA,QAAM,QAAgB,UAAU,KAAK;AACrC,QAAM,gBAA0B,CAAC;AAEjC,QAAM,QAAQ,UAAQ;AACpB,QAAI,WAAW;AAEf,SAAK,KAAK,QAAQ,SAAO;AACvB,UAAI,IAAI,OAAO,OAAO,OAAO,IAAI,SAAS,OAAO,SAAS,IAAI,QAAQ,OAAO,MAAM;AACjF,oBAAY;AAAA,MACd;AAAA,IACF,CAAC;AAED,QAAI,aAAa,KAAK,KAAK,QAAQ;AACjC,oBAAc,KAAK,KAAK,EAAE;AAAA,IAC5B;AAAA,EAEF,CAAC;AAED,SAAO,cAAc,OAAO,CAAC,KAAK,YAAY;AAC5C,WAAO,MAAM;AAAA,EACf,GAAG,CAAC;AACN;AAEA,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW,QAAQ;AACjC,QAAM,QAAgB,UAAU,KAAK;AACrC,QAAM,aAAuB,CAAC;AAE9B,QAAM,QAAQ,UAAQ;AACpB,QAAI,MAAM;AACV,QAAI,QAAQ;AACZ,QAAI,OAAO;AAEX,SAAK,KAAK,QAAQ,SAAO;AACvB,UAAI,IAAI,MAAM,KAAK;AACjB,cAAM,IAAI;AAAA,MACZ;AAEA,UAAI,IAAI,QAAQ,OAAO;AACrB,gBAAQ,IAAI;AAAA,MACd;AAEA,UAAI,IAAI,OAAO,MAAM;AACnB,eAAO,IAAI;AAAA,MACb;AAAA,IACF,CAAC;AAED,eAAW,KAAK,MAAM,OAAO,KAAK;AAAA,EAEpC,CAAC;AAED,SAAO,WAAW,OAAO,CAAC,KAAK,YAAY;AACzC,WAAO,MAAM;AAAA,EACf,GAAG,CAAC;AACN;AAEA,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,QAKP,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AAAA,EACA,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,QAKP,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AAAA,EACA,gBAAgB;AAAA,EAChB,WAAW;AACb,CAAC;",
  "names": ["_a"]
}
