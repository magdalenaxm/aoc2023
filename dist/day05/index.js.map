{
  "version": 3,
  "sources": ["../../src/day05/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\n\nconst parseInput = (rawInput: string) => rawInput;\n\ntype Range = { destinationRangeStart: number; sourceRangeStart: number; range: number }\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  const lines = input.split(\"\\n\\n\")\n  const seeds = lines[0].substring(lines[0].indexOf(\":\") + 1).trim().split(\" \").map(seed => parseInt(seed))\n  const maps: Range[][] = []\n\n\n  lines.forEach(line => {\n    let rows = line.split(\"\\n\");\n    rows.shift()\n    const ranges: Range[] = []\n\n    rows.forEach(row => {\n      const values = row.split(\" \");\n      ranges.push({\n        destinationRangeStart: parseInt(values[0]),\n        sourceRangeStart: parseInt(values[1]),\n        range: parseInt(values[2])\n      })\n    })\n\n    maps.push(ranges)\n  })\n\n\n  const locations = seeds.map(seed => {\n    let sourceNumber = seed;\n\n    for (let i = 1; i <= maps.length - 1; i++) {\n      const assigendRange = maps[i].find(map => sourceNumber >= map.sourceRangeStart && sourceNumber <= (map.sourceRangeStart + map.range - 1))\n\n      if (assigendRange) {\n        sourceNumber = sourceNumber - assigendRange.sourceRangeStart + assigendRange.destinationRangeStart;\n      }\n    }\n\n    return sourceNumber\n  })\n\n  return Math.min(...locations);\n};\n\ntype BigRange = { destinationRangeStart: bigint; sourceRangeStart: bigint; range: bigint }\n\n\nconst part2 = (rawInput: string) => {\n \n  const input = parseInput(rawInput);\n\n  const lines = input.split(\"\\n\\n\")\n  const seedsInput = lines[0].substring(lines[0].indexOf(\":\") + 1).trim().split(\" \").map(seed => parseInt(seed))\n  const maps: BigRange[][] = []\n  const locations: BigInt[] = []\n\n  lines.forEach(line => {\n    let rows = line.split(\"\\n\");\n    rows.shift()\n    const ranges: BigRange[] = []\n\n    rows.forEach(row => {\n      const values = row.split(\" \");\n      ranges.push({\n        destinationRangeStart: BigInt(parseInt(values[0])),\n        sourceRangeStart: BigInt(parseInt(values[1])),\n        range: BigInt(parseInt(values[2]))\n      })\n    })\n\n    maps.push(ranges)\n  })\n\n\n\n  for(let i = seedsInput[0]; i < seedsInput[0] + (seedsInput[1] - 1); i++){\n      let sourceNumber = i as unknown as bigint;\n\n    for (let i = 1; i <= maps.length - 1; i++) {\n      \n      const assigendRange = maps[i].find(map => sourceNumber >= map.sourceRangeStart && sourceNumber <= (BigInt(map.sourceRangeStart) + BigInt(map.range) - BigInt(1)))\n\n      if (assigendRange) {\n        sourceNumber = BigInt(sourceNumber) - BigInt(assigendRange.sourceRangeStart) + BigInt(assigendRange.destinationRangeStart);\n      }\n    }\n\n    locations.push(sourceNumber)\n\n  }\n\n  // if (rawInput.includes(\"seeds: 79 14 55 13\")) {\n\n  //   console.log(seedsInput)\n  //   console.log(\"seeds: \", seeds)\n\n  // }\n  \n\n\n  return locations.reduce((m, e) => e < m ? e : m);\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4`,\n        expected: 35,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n     input: `seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4`,\n        expected: 46,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n  onlyTests: false,\n});\n"],
  "mappings": "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",
  "names": ["i"]
}
